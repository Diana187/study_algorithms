"""
array of int
–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ 2 —á–∞—Å—Ç–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞
–∫–∞–∂–¥–æ–π –∏–∑ —á–∞—Å—Ç–µ–π –±—ã–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞

len(array) >= 2

# Signature
list[int] -> bool

# Tests
[] -> impossible

[1, 3, 5] -> False

[2, 2] -> True

[2, 1, 3] -> True
[2] [1, 3] False
[2, 1] [3] True

[0, 2, 1, 3] -> True
[0] [2, 1, 3]
[0, 2] [1, 3]
[0, 2, 1] [3]


[-1, 2, 1, 3] -> False

# Solution
—Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö,
–µ—Å–ª–∏ —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ —á–∞—Å—Ç—è—Ö —Ä–∞–≤–Ω–∞ ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True,
–µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —Ç–∞–∫—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
—è –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–º–Ω—é, –Ω–æ—Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
–∑–¥–µ—Å—å –¥–≤–∞ —Ü–∏–∫–ª–∞: –≤–Ω–µ—à–Ω–∏–π O(n), –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –µ—â—ë –æ–¥–∏–Ω —Ç–æ–∂–µ O(n)
–Ω–∞–¥–æ –∏—Ö –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å? O(n2)
–í–µ—Ä–Ω–æ.
–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—ã–ª –±—ã: –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ?
–ò —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª–∞ –¥—É–º–∞—Ç—å –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É

—Å—Ä–µ–∑–∞–º–∏
–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Ä–µ–∑—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ sum(arr[:number])
—ç—Ç–æ —Ç–æ–∂–µ O(n)

–¢–∞–∫ —á—Ç–æ –Ω—É–∂–Ω–æ –≤–æ—Ç —ç—Ç–æ "—Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∞–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫ –ª–µ–≤—ã–º"

–≤–∑—è—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –ª–µ–≤—É—é —Å—É–º–º—É, –¥–æ–±–∞–≤–ª—è—Ç—å –∫ –Ω–µ–π –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–∞–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
—Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ª–µ–≤—É—é —Å—É–º–º—É —Å –ø—Ä–∞–≤–æ–π, —Ç–∞–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª
–ê–≥–∞
"""


def split_array(arr: list) -> bool:

    # –¢–∏–ø–æ –ø—Ä–æ—Ö–æ–¥—è—Å—å –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º number —Ç—Ä–µ–∫–∞–µ—à—å –∑–¥–µ—Å—å –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for number in range(1, len(arr)):  # 0
        left_part = 0  # 0
        right_part = sum(arr)  # 0

        # [1, -1]
        #    |
        # –ê —Ç–∞–∫ —É–¥–æ–±–Ω–æ —Ç—Ä–µ–∫–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ pointer'–∞
        for i in range(number):
            left_part += arr[i]
        right_part -= left_part

        if left_part == right_part:
            return True

        # –ï—Å–ª–∏ –±—ã —è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–ª —Ç–µ–±—è –Ω–∞ —Ä–æ–ª—å –ø–∏—Ç–æ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —è –±—ã –ø—Ä–∏–¥—Ä–∞–ª—Å—è
        # –∫ —Ç–æ–º—É, —á—Ç–æ —Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç—É—Ç slices
        # if sum(arr[:number]) == sum(arr[number:]):
        #     return True

    return False


def split_array_2(arr: list) -> bool:
    # –û—Ç–ª–∏—á–Ω–æ, –º–æ–ª–æ–¥–µ—Ü
    arr_sum = sum(arr)
    left_sum = 0

    for i in range(len(arr) - 1):
        left_sum += arr[i]
        if left_sum == arr_sum - left_sum:
            return True

    return False


# –°–º–æ—Ç—Ä–∏ –∫–∞–∫ —ç—Ç–æ —É–¥–æ–±–Ω–æ –¥–µ–ª–∞—Ç—å, (–∑–∞–±–µ–≥–∞—è –≤–ø–µ—Ä—ë–¥)


# üëå
